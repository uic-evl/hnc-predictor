{"version":3,"sources":["components/FormView.js","components/LineView/AxisBottom.js","components/LineView/CreateBottomAxis.js","components/LineView/AxisLeft.js","components/LineView/CreateLeftAxis.js","components/LineView/LinePlot.js","components/LineView/CreateLegends.js","components/LineView/CreateLinePlots.js","components/LineView/RiskSvgTable.js","components/LineView/TableLine.js","components/LineView/LineView.js","components/Stratification/Stratification.js","App.js","reportWebVitals.js","index.js"],"names":["FormView","_ref","onButtonClick","ageRef","perfScoreRef","packRef","siteRef","tRef","nRef","hpvRef","stage","stageUpdate","ajccShow","setajccShow","useState","handleajccClose","_jsx","Col","className","md","children","_jsxs","Form","id","Group","controlId","Label","Select","defaultValue","ref","value","onChange","Check","inline","label","name","type","defaultChecked","AiFillQuestionCircle","onClick","handleajccShow","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AxisBottom","xScale","yScale","scaleOffset","innerHeight","xStart","xEnd","range","yEnd","ticks","transform","concat","x1","x2","y1","y2","map","t","i","x","React","Fragment","y","CreateBottomAxis","innerWidth","xAxisLabelOffset","xAxisLabel","_Fragment","textAnchor","AxisLeft","yStart","CreateLeftAxis","yAxisLabelOffset","yAxisLabel","LinePlot","classVal","data","color","time","onHover","hoverOut","fill","stroke","strokeWidth","onMouseEnter","onMouseOut","d","line","CreateLegends","clnames","margin","legendOffset","legendSize","textPaddingX","textPaddingY","legend","bottom","right","width","height","CreateLinePlots","pred","padX","padY","padX2","off","RiskSvgTable","head","topic","textScale","mar","lineHeight","w","xxStart","xxEnd","role","tt","j","xx","fontSize","index","indexOf","val","Math","round","TableLine","dotOffset","top","left","years","LineView","windowHeight","windowWidth","svgheight","scaleLinear","domain","scaleOrdinal","d3","style","setShow","handleClose","Row","paddingLeft","handleShow","Stratification","lowRef","upRef","patientClass","riskCalculation","riskRef","imgSrc","setImgSrc","handleChange","console","log","current","folder","lower","upper","imageUrl","$","fadeOut","fadeIn","riskShow","setriskShow","handleriskClose","imageShow","setImageShow","handleImageClose","marginLeft","InputGroup","size","Text","FormControl","Image","src","handleImageShow","handleriskShow","overallRisk","overallPerc","localRisk","localPerc","regionalRisk","regionalPerc","stage_new","stage_new_7th","Array","from","createArrayRange","start","end","step","result","push","toFixed","yearIndex","App","windowSize","setWindowSize","window","useEffect","handleResize","addEventListener","removeEventListener","useWindowResize","createRef","prediction","setPrediction","setPatientClass","ajccStage","setAjccStage","riskValues","low","up","node","twoYearOverall","overallMortality","twoYearLocal","localMortality","twoYearRegional","regionalMortality","onTChange","event","target","updateAjccStage","onNChange","handleButtonClick","axios","post","then","response","predData","catch","error","site","hpv","includes","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cf9e8b8.chunk.js","sourcesContent":["import { Form, Col, Button, Modal } from \"react-bootstrap\"\r\nimport { useState } from \"react\"\r\n\r\nimport { AiFillQuestionCircle } from \"react-icons/ai\"\r\n\r\nimport './FormView.css'\r\n\r\nexport   const FormView = ({\r\n  onButtonClick, \r\n  ageRef, \r\n  perfScoreRef, \r\n  packRef, \r\n  siteRef, \r\n  // tlcRef, \r\n  tRef, \r\n  nRef, \r\n  hpvRef,\r\n  stage,\r\n  stageUpdate\r\n}) =>{\r\n  const [ajccShow, setajccShow] = useState(false);\r\n\r\n  const handleajccClose = () => setajccShow(false);\r\n  const handleajccShow = () => setajccShow(true);\r\n\r\n  return(\r\n    <Col className='d-flex justify-content-start'  md=\"2\" >\r\n      <Form id=\"inputback\" className=\"formPadding\"> \r\n      <h4>Input Variables</h4>\r\n\r\n      <h6 id=\"textIndent\">Patient Specifics</h6>\r\n\r\n      <Form.Group controlId=\"formGridState\" id=\"space\">\r\n        <Form.Label>Age</Form.Label>\r\n        <Form.Select defaultValue=\"65-75\" ref={ageRef} id=\"indent\">\r\n          <option value='<55'> &#60; 55 </option>\r\n          <option value='55-65'> 55 - 65 </option>\r\n          <option value='65-75'> 65 - 75 </option>\r\n          <option value='>75'> &#62; 75</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label >Performance Score</Form.Label>\r\n        <Form.Select defaultValue=\"0\" ref={perfScoreRef} id=\"indent\">\r\n          <option value='0'>0</option>\r\n          <option value='1'>1</option>\r\n          <option value='>2'>&#62; 2</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>Pack Years</Form.Label>\r\n        <Form.Select defaultValue=\"25-50\" ref={packRef} id=\"indent\">\r\n          <option value='<5'> &#60; 5 </option>\r\n          <option value='5-25'> 5 - 25</option>\r\n          <option value='25-50'> 25 - 50 </option>\r\n          <option  value='>50'> &#62; 50 </option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <h6 id='space'>Tumor Specifics</h6>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>Tumor Site</Form.Label>\r\n        <Form.Select defaultValue=\"OPC\" ref={siteRef} id=\"indent\" onChange={stageUpdate}>\r\n          <option value='OPC'> OPC </option>\r\n          <option value='Hypopharynx'> Hypopharynx </option>\r\n          <option value='Oral Cavity'> Oral Cavity </option>\r\n          <option value='Larynx'> Larynx </option>\r\n          <option value='Nasopharynx'> Nasopharynx </option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group >\r\n        <Form.Label id='space'>T Stage</Form.Label>\r\n        <br/>\r\n        <Form.Check\r\n          inline\r\n          label=\"T1\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-1`}\r\n          value=\"T1\"\r\n          onChange={tRef}\r\n          className=\"radin\"\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"T2\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-2`}\r\n          value=\"T2\"\r\n          onChange={tRef}\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"T3\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-3`}\r\n          value=\"T3\"\r\n          onChange={tRef}\r\n          defaultChecked\r\n        />\r\n\r\n        <Form.Check\r\n          inline\r\n          label=\"T4\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-4`}\r\n          value=\"T4\"\r\n          onChange={tRef}\r\n          className=\"radin\"\r\n          defaultChecked\r\n        />\r\n      </Form.Group>\r\n\r\n\r\n      <Form.Group >\r\n        <Form.Label id='space'>N Stage</Form.Label>\r\n        <br/>\r\n        <Form.Check\r\n          inline\r\n          label=\"N0\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-1`}\r\n          value=\"N0\"\r\n          onChange={nRef}\r\n          className=\"radin\"\r\n        />\r\n\r\n        <Form.Check\r\n          inline\r\n          label=\"N1\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-2`}\r\n          value=\"N1\"\r\n          onChange={nRef}\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N2a-b\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-3`}\r\n          value=\"N2a-b\"\r\n          onChange={nRef}\r\n          defaultChecked\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N2c\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-4`}\r\n          value=\"N2c\"\r\n          onChange={nRef}\r\n          className=\"radin\"\r\n          defaultChecked\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N3\"\r\n          name='NGroup'\r\n          type=\"radio\"\r\n          id={`inline-radio-5`}\r\n          value=\"N3\"\r\n          onChange={nRef}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>HPV Status</Form.Label>\r\n        <Form.Select defaultValue=\"Positive\" ref={hpvRef} id=\"indent\" onChange={stageUpdate}>\r\n          <option value='Positive'> Positive </option>\r\n          <option value='Negative'>Negative</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n      <br/>\r\n      {\r\n        stage !== null &&\r\n        <div id='textIndent'>\r\n          AJCC<sup>8th</sup> stage:  <b>{stage}</b> <AiFillQuestionCircle onClick={handleajccShow}/>\r\n\r\n          <Modal show={ajccShow} onHide={handleajccClose}>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>AJCC<sup>8th</sup> stage</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              This AJCC <sup>8th</sup> staging is generated from the T-stage, \r\n              N-stage, tumor site and HPV-status input with in-house \r\n              developed algorithm. Details can be found in the \r\n              supplementary data of the manuscript [link_to_paper]\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleajccClose}>\r\n                Close\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </div>\r\n        \r\n      }\r\n      <br/>\r\n      \r\n      <Button variant=\"primary\"\r\n        onClick={onButtonClick}\r\n        id='textIndent'\r\n      >\r\n        Submit\r\n      </Button>\r\n      </Form>\r\n\r\n    </Col>\r\n  )}","import React from \"react\";\r\n\r\nexport const AxisBottom = ({xScale, yScale, scaleOffset, innerHeight}) => {\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    return (\r\n        <g transform={`translate(0, ${innerHeight})`}>\r\n            <line className='axisLine' x1={xStart} x2={xEnd} y1={yEnd} y2={yEnd} />\r\n            <g className=\"ticks\">\r\n                {ticks.map((t, i) => {\r\n                    const x = xScale(t);\r\n                    return (\r\n                    <React.Fragment key={i}>\r\n                        <line x1={x} x2={x} y1={yEnd} y2={yEnd + scaleOffset}/>\r\n                        <text\r\n                        x={x}\r\n                        y={yEnd + scaleOffset * 5}\r\n                        >\r\n                        {t}\r\n                        </text>\r\n                    </React.Fragment>\r\n                    );\r\n                })}\r\n            </g>\r\n        </g>\r\n    );\r\n};","import { AxisBottom } from \"./AxisBottom\"\r\nexport const CreateBottomAxis = ({\r\n    xScale,\r\n    yScale,\r\n    innerHeight,\r\n    innerWidth,\r\n    xAxisLabelOffset,\r\n    xAxisLabel,\r\n    scaleOffset\r\n}) => {\r\n    return(\r\n        <>\r\n            <AxisBottom \r\n                xScale ={xScale}\r\n                yScale = {yScale}\r\n                scaleOffset = {scaleOffset}\r\n                innerHeight={innerHeight}\r\n            />\r\n\r\n            <text\r\n                className='axis-label'\r\n                x={innerWidth / 2}\r\n                y={innerHeight + xAxisLabelOffset}\r\n                textAnchor='middle'\r\n            >{xAxisLabel}</text>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const AxisLeft = ({xScale, yScale, scaleOffset}) => {\r\n    const [xStart, ] = xScale.range();\r\n    const [yStart, yEnd] = yScale.range();\r\n    const ticks = yScale.ticks();\r\n    return (\r\n        <>\r\n            <line className={'axisLine'} x1={xStart} x2={xStart} y1={yEnd} y2={yStart} /> \r\n            <g className=\"ticks\">\r\n                {ticks.map((t, i) => {\r\n                    const y = yScale(t);\r\n                    return (\r\n                    <React.Fragment key={i}>\r\n                        <line x1={xStart} x2={xStart - scaleOffset} y1={y} y2={y}/>\r\n                        <text\r\n                        x={xStart - scaleOffset * 4}\r\n                        y={y + scaleOffset * 1.25}\r\n                        >\r\n                        {t * 100}\r\n                        </text>\r\n                    </React.Fragment>\r\n                    );\r\n                })}\r\n            </g>\r\n        </>\r\n    );\r\n};","import { AxisLeft } from \"./AxisLeft\"\r\n\r\nexport const CreateLeftAxis = ({\r\n    xScale,\r\n    yScale,\r\n    yAxisLabelOffset,\r\n    yAxisLabel,\r\n    scaleOffset,\r\n    innerHeight\r\n}) => {\r\n    return (\r\n        <>\r\n            <AxisLeft \r\n                xScale={xScale}\r\n                yScale = {yScale}\r\n                // innerWidth={innerWidth}\r\n                scaleOffset = {scaleOffset}\r\n            />\r\n            \r\n            <text\r\n                className='axis-label'       \r\n                textAnchor='middle'\r\n                transform={`translate(${-yAxisLabelOffset}, ${innerHeight / 2} )rotate(-90)`}\r\n            >{yAxisLabel}</text>\r\n        </>\r\n    )\r\n}","import { curveNatural, line } from \"d3\";\r\n\r\nexport const LinePlot = ({\r\n    classVal,\r\n    data, \r\n    xScale, \r\n    yScale, \r\n    color,\r\n    time ,\r\n    onHover,\r\n    hoverOut\r\n    }) => {\r\n        // console.log(\"in line plot\")\r\n        // console.log(data[0])\r\n        return(\r\n        <g className='mark'> \r\n            <path \r\n                className = {classVal}\r\n                id = \"line-plot\"\r\n                fill=\"none\"\r\n                stroke={color}\r\n                strokeWidth={\"2px\"}\r\n                onMouseEnter={() => onHover(classVal)}\r\n                onMouseOut={() => hoverOut()}\r\n                d={line()\r\n                    .x((d,i) => {\r\n                        // console.log(\"line plot d\")\r\n                        // console.log(d)\r\n                        return xScale(time[i])\r\n                    })\r\n                    .y((d,i) => {\r\n                        // console.log(\"line plot i\")\r\n                        // console.log(time[i])\r\n                        return yScale(d)\r\n                    })\r\n                    // .curve(curveNatural)\r\n                    (data[0])}\r\n            />\r\n        </g>\r\n    )};","export const CreateLegends = ({\r\n    onHover,\r\n    clnames,\r\n    hoverOut,\r\n    innerWidth,\r\n    innerHeight,\r\n    margin,\r\n    legendOffset,\r\n    legendSize,\r\n    color,\r\n    textPaddingX,\r\n    textPaddingY,\r\n    legend,\r\n    i\r\n}) => {\r\n    return(\r\n        <g\r\n            className='legend'\r\n            transform={`translate(0, ${innerHeight - margin.bottom})`}\r\n            onMouseEnter={() => onHover(clnames[i])}\r\n            onMouseOut = {() => hoverOut()}\r\n        >\r\n            <rect\r\n                x = {(margin.right)}\r\n                y = {legendOffset * i - 10}\r\n                width = {legendSize}\r\n                height = {legendSize}\r\n                fill = {color(i)}\r\n            />\r\n            <text\r\n                x = {textPaddingX + (margin.right)}\r\n                y = {textPaddingY + (legendOffset * i) - 10}\r\n            >\r\n                {`${legend[i]}`}\r\n            </text>\r\n\r\n        </g>\r\n    )\r\n}","import { LinePlot } from \"./LinePlot\"\r\nimport { CreateLegends } from \"./CreateLegends\"\r\n\r\nexport const CreateLinePlots = ({\r\n    data,\r\n    clnames,\r\n    xScale,\r\n    yScale,\r\n    color,\r\n    time,\r\n    onHover,\r\n    hoverOut,\r\n    innerWidth,\r\n    innerHeight,\r\n    margin,\r\n    legendOffset,\r\n    legendSize,\r\n    textPaddingX,\r\n    textPaddingY,\r\n    legend\r\n}) => {\r\n    return(\r\n        data.map((pred, i) =>{ \r\n            // console.log(i)\r\n            // console.log(color(i))\r\n            return(\r\n            <>\r\n                <LinePlot \r\n                    key={i}\r\n                    classVal={clnames[i]}\r\n                    data={pred}\r\n                    xScale = {xScale}\r\n                    yScale = {yScale}\r\n                    color={color(i)}\r\n                    time={time}\r\n                    onHover={onHover}\r\n                    hoverOut={hoverOut}\r\n                />\r\n\r\n                <CreateLegends \r\n                    onHover={onHover}\r\n                    clnames={clnames}\r\n                    hoverOut={hoverOut}\r\n                    innerWidth={innerWidth}\r\n                    innerHeight={innerHeight}\r\n                    margin={margin}\r\n                    legendOffset={legendOffset}\r\n                    legendSize={legendSize}\r\n                    color={color}\r\n                    textPaddingX={textPaddingX}\r\n                    textPaddingY={textPaddingY}\r\n                    legend={legend}\r\n                    i={i}\r\n                />\r\n\r\n            </>\r\n\r\n        )})\r\n    )\r\n}","import React from \"react\";\r\nimport { line, scaleLinear, scaleOrdinal } from \"d3\"\r\nimport { Col, Table } from \"react-bootstrap\"\r\nimport './RiskSvgTable.css'\r\n\r\nconst padX = 82\r\nconst padY = 30\r\nconst padX2 = 20\r\nconst strokeWidth = 1\r\nconst padW = 3\r\nconst padH = 8\r\nconst scaleOffset = 2\r\nconst off = 10\r\nexport const RiskSvgTable = ({\r\n    head,\r\n    topic,\r\n    time,\r\n    data,\r\n    color,\r\n    xScale,\r\n    yScale,\r\n    textScale,\r\n    mar,\r\n    lineHeight,\r\n    onHover,\r\n    hoverOut,\r\n    clnames\r\n}) =>{\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    // const textticks = textScale.ticks();\r\n\r\n    // console.log(textticks)\r\n    // let storeXX = 0\r\n    // x1={x + padY - scaleOffset} \r\n    // x={xStart - padX - off} \r\n\r\n    let w = (xScale(ticks[0]) + padY + 2) - (xStart - padX - off)\r\n\r\n    \r\n    const [xxStart, xxEnd] = textScale.range()\r\n\r\n    return (\r\n        // <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 370 160\">\r\n\r\n            <g id='rowGroup' transform={`translate(0, ${mar})`} role=\"table\">\r\n                {\r\n                    topic.map((tt, j) =>{\r\n                        const xx = textScale(j)    \r\n                        // storeXX = xx                     \r\n                        // console.log(j, xx)\r\n                        return(\r\n                            <>\r\n                            <rect \r\n                                x={xStart - padX - off} \r\n                                y={xx - padY} \r\n                                width={w} \r\n                                height={lineHeight + padH}\r\n                                fill={\"white\"}\r\n                                onMouseEnter={() => onHover(clnames[j])}\r\n                                onMouseOut={() => hoverOut()}\r\n                            />\r\n                            <line \r\n                                x1={xStart - padX - off} \r\n                                x2={xEnd + padX2 + padH} \r\n                                y1={xx - padY} \r\n                                y2={xx - padY}  \r\n                                stroke={'black'} \r\n                                strokeWidth={strokeWidth}\r\n                            />\r\n                            <text x={xStart} y={xx} fontSize='1em' textAnchor='middle' role=\"row\"> \r\n                                {\r\n\r\n                                    head.map((t, i) => {\r\n                                        // if(t !== 10){\r\n                                            const x = xScale(i);\r\n                                            if(i === 0){\r\n                                                return(\r\n                                                    <tspan\r\n                                                    x={x - padX2 - 10}\r\n                                                    role='cell'\r\n                                                    stroke=\"black\"\r\n                                                    strokeWidth={0.5}\r\n                                                    onMouseEnter={() => onHover(clnames[j])}\r\n                                                    onMouseOut={() => hoverOut()}\r\n                                                    >\r\n                                                    {tt}\r\n                                                    </tspan>\r\n\r\n                                                )\r\n                                            }else{\r\n                                                // console.log(t)\r\n                                                let index = time.indexOf(t)\r\n                                                let datum = data[j][0]\r\n                                                let val = datum[index] * 100\r\n                                                val = Math.round(val)\r\n                                                return (\r\n                                                    <React.Fragment key={i}>\r\n                                                        <tspan\r\n                                                            x={x}\r\n                                                            role='cell'\r\n                                                        >\r\n                                                        {val}\r\n                                                        </tspan>\r\n                                                    </React.Fragment>\r\n                                                );\r\n\r\n                                            }\r\n                                            \r\n                                        // }\r\n                                        \r\n                                    })\r\n\r\n                                }                            \r\n                            </text>\r\n                            </>\r\n                        )\r\n                    })\r\n                    }   \r\n                                \r\n                <line \r\n                    x1={xStart - padX - off} \r\n                    x2={xEnd + padX2 + padH} \r\n                    y1={xxEnd + padH + lineHeight - padY} \r\n                    y2={xxEnd + padH + lineHeight - padY}  \r\n                    stroke={'black'}\r\n                    strokeWidth={strokeWidth}\r\n                /> \r\n                <g>\r\n                    <line \r\n                            x1={xStart + padY + scaleOffset + off} \r\n                            x2={xStart + padY + scaleOffset + off} \r\n                            y1={xxEnd + padH + lineHeight + 2 - padY} \r\n                            y2={xxEnd + padH + lineHeight + off - padY}\r\n                            stroke={'black'}\r\n                            strokeWidth={strokeWidth * 1.5}\r\n                        />\r\n                    <line \r\n                        x1={xEnd + padX2} \r\n                        x2={xEnd + padX2} \r\n                        y1={xxEnd + padH + lineHeight + 2 - padY} \r\n                        y2={xxEnd + padH + lineHeight + off - padY}\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    />\r\n                    <line \r\n                        x1={xStart + padY + scaleOffset + off} \r\n                        x2={xEnd + padX2 } \r\n                        y1={xxEnd + padH + lineHeight + off - padY} \r\n                        y2={xxEnd + padH + lineHeight + off - padY}  \r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    /> \r\n                    <line \r\n                        x1={xScale(4) + padY - scaleOffset} \r\n                        x2={xScale(4) + padY - scaleOffset} \r\n                        y1={xxEnd + padH + lineHeight + off - padY} \r\n                        y2={xxEnd + padH + lineHeight - 10 }\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    />\r\n\r\n                    <text\r\n                        className='axis-label'\r\n                        x={xScale(5) - 15}\r\n                        y={xxEnd + padH + lineHeight + 7}\r\n                        textAnchor='middle'\r\n                    >{`Cumulative Probability (%)`}</text>\r\n                </g>\r\n                {/* <rect x='25' y='40' width='310' height='20' fill='gainsboro'/>\r\n                <rect x='25' y='76' width='310' height='20' fill='gainsboro'/> */}                \r\n\r\n                <g>\r\n                    <line \r\n                        x1={- xStart - padX - off + padW} \r\n                        x2={- xStart - padX - off + padW} \r\n                        y1={xxStart - padY} \r\n                        y2={xxEnd + padH + lineHeight - padY}\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth}\r\n                    />\r\n                    {ticks.map((t, i) => {\r\n                        const x = xScale(t);\r\n                        if( i === 0){\r\n                            return (\r\n                                <React.Fragment key={i}>\r\n                                    <line \r\n                                        x1={x + padY + scaleOffset} \r\n                                        x2={x + padY + scaleOffset} \r\n                                        y1={xxStart - padY} \r\n                                        y2={xxEnd + padH + lineHeight - padY}\r\n                                        stroke={'black'}\r\n                                        strokeWidth={strokeWidth}\r\n                                    />\r\n                                </React.Fragment>\r\n                                );\r\n\r\n                        }else{\r\n                            return (\r\n                                <React.Fragment key={i}>\r\n                                    <line \r\n                                        x1={x + padY - scaleOffset} \r\n                                        x2={x + padY - scaleOffset} \r\n                                        y1={xxStart - padY} \r\n                                        y2={xxEnd + padH + lineHeight - padY}\r\n                                        stroke={'black'}\r\n                                        strokeWidth={strokeWidth}\r\n                                    />\r\n                                </React.Fragment>\r\n                                );\r\n                        }\r\n                            \r\n                    })}\r\n                </g>\r\n\r\n            </g>\r\n            // </svg>\r\n    )\r\n}","import React from \"react\";\r\nimport './TableLine.css'\r\nexport const TableLine = ({\r\n    width,\r\n    margin,\r\n    xScale, \r\n    yScale, \r\n    scaleOffset, \r\n    innerHeight,\r\n    dotOffset,\r\n    lineHeight\r\n}) => {\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    // if(window.innerHeight <= 750){\r\n    //     // normal laptop\r\n    //     height = window.innerHeight - (window.innerHeight / 1.6)\r\n    // }else{\r\n    //     height = window.innerHeight - (window.innerHeight / 1.35)\r\n\r\n    // } \r\n    // console.log(window.innerHeight)\r\n    return (\r\n        <g transform={`translate(0, ${innerHeight + dotOffset})`}>\r\n                    <g className=\"ticks\">\r\n                        {ticks.map((t, i) => {\r\n                            if(t !== 0){\r\n                                const x = xScale(t);\r\n                                return (\r\n                                <React.Fragment key={i}>\r\n                                    {/* <line x1={x} x2={x} y1={yEnd} y2={yEnd + lineHeight} id='tbl'/> */}\r\n                                    <text\r\n                                    x={x}\r\n                                    y={yEnd + lineHeight + scaleOffset * 5}\r\n                                    >\r\n                                    {t}\r\n                                    </text>\r\n                                </React.Fragment>\r\n                                );\r\n                            }\r\n                            \r\n                        })}\r\n                    </g>\r\n\r\n        </g>\r\n\r\n    );\r\n}","import { Col, Row, Button, Modal } from \"react-bootstrap\"\r\nimport {AiFillQuestionCircle} from 'react-icons/ai'\r\n\r\nimport { useState } from \"react\"\r\n\r\nimport { line, scaleLinear, scaleOrdinal } from \"d3\"\r\n\r\nimport * as d3 from 'd3'\r\n\r\nimport { CreateBottomAxis } from \"./CreateBottomAxis\"\r\nimport { CreateLeftAxis } from \"./CreateLeftAxis\"\r\nimport { CreateLinePlots } from \"./CreateLinePlots\"\r\n\r\nimport { RiskTable } from \"./RiskTable\"\r\nimport { RiskSvgTable } from \"./RiskSvgTable\"\r\nimport { TableLine } from \"./TableLine\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst margin = {top:20, right:30, bottom:65, left:90} \r\n\r\nconst xAxisLabelOffset = 50\r\nconst yAxisLabelOffset = 40\r\n\r\nconst xAxisLabel = 'Time (years)'\r\nconst yAxisLabel = 'Predicted Risk (%)'\r\n\r\nconst legend = ['Overall Survival', \"Local Control\", \"Regional Control\"]\r\nconst clnames = ['overall', 'local', 'region']\r\n\r\nconst textPaddingX = 15\r\nconst textPaddingY = 10\r\n\r\nconst legendSize = 10\r\nconst legendOffset = 20\r\n\r\nconst scaleOffset = 5\r\nconst dotOffset = 10\r\nconst lineHeight = 50\r\nconst svgtableOffset = 20\r\n\r\nconst years = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nconst tableHeight = 205;\r\n\r\nexport const LineView = ({data, time, windowHeight, windowWidth}) => {\r\n\r\n    const width = windowWidth / 2\r\n    const svgheight = windowHeight - 50\r\n    const height = windowHeight / 1.75\r\n\r\n    // console.log(windowWidth,windowHeight)\r\n    \r\n    const innerHeight = height - margin.top - margin.bottom\r\n    const innerWidth = width - margin.left - margin.right\r\n\r\n    // let tableHeight = window.innerHeight - (window.innerHeight / 1.75) - lineHeight - scaleOffset - dotOffset - svgtableOffset\r\n\r\n    const mar = innerHeight + lineHeight + (scaleOffset * 2)  + margin.bottom\r\n\r\n    // console.log(tableHeight)\r\n    const textScale = scaleLinear()\r\n        .domain([0, 2])\r\n        .range([0, tableHeight - margin.bottom - margin.top])\r\n\r\n    // console.log(years)\r\n    // console.log(time)\r\n\r\n    // console.log(time)\r\n    const xScale = scaleLinear()\r\n    .domain([0, 10])\r\n    .range([0, innerWidth])\r\n    // .nice()\r\n\r\n    const yScale = scaleLinear()\r\n        .domain([0, 1])\r\n        .range([innerHeight, 0])\r\n        // .nice()\r\n\r\n\r\n    const color = scaleOrdinal()\r\n        .domain([0, 1])\r\n        .range([\"#984ea3\", \"#377eb8\", '#d95f02'])\r\n\r\n    const onHover = (val) => {\r\n        // console.log(val)\r\n        d3.selectAll('#line-plot').style('opacity', 0.2)\r\n        d3.select(`.${val}`).style('opacity', 1)\r\n        \r\n    }\r\n\r\n    const hoverOut = () => {\r\n        d3.selectAll('#line-plot').style('opacity', 1)\r\n    }\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    \r\n    return(\r\n    <Col className=\"linePlot\" md=\"6\" id=\"outback\">\r\n        <Row>\r\n            <Col md='12' style={{paddingLeft:'0px'}}>\r\n                <h4 className='d-flex justify-content-center'>Outcome Prediction <AiFillQuestionCircle onClick={handleShow}/></h4>\r\n\r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>Outcome Prediction</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>The outcome curves are based on the clinical models developed and validated \r\n                        on an international dataset &#62; 4500 patients [link_to_paper]\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <svg width={width} height={svgheight}>\r\n                    <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n\r\n                        <CreateBottomAxis \r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            innerHeight={innerHeight}\r\n                            innerWidth={innerWidth}\r\n                            xAxisLabelOffset={xAxisLabelOffset}\r\n                            xAxisLabel={xAxisLabel}\r\n                            scaleOffset={scaleOffset}\r\n                        />\r\n\r\n                        <CreateLeftAxis \r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            yAxisLabelOffset={yAxisLabelOffset}\r\n                            yAxisLabel={yAxisLabel}\r\n                            scaleOffset={scaleOffset}\r\n                            innerHeight={innerHeight}\r\n                        />\r\n\r\n                        <CreateLinePlots \r\n                            data={data}\r\n                            clnames={clnames}\r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            color={color}\r\n                            time={time}\r\n                            onHover={onHover}\r\n                            hoverOut={hoverOut}\r\n                            innerWidth={innerWidth}\r\n                            innerHeight={innerHeight}\r\n                            margin = {margin}\r\n                            legendOffset={legendOffset}\r\n                            legendSize={legendSize}\r\n                            textPaddingX={textPaddingX}\r\n                            textPaddingY={textPaddingY}\r\n                            legend={legend}\r\n                        />\r\n\r\n                        <TableLine \r\n                            width={width}\r\n                            margin={margin}\r\n                            xScale ={xScale}\r\n                            yScale = {yScale}\r\n                            scaleOffset = {scaleOffset}\r\n                            innerHeight={innerHeight}\r\n                            dotOffset = {dotOffset}\r\n                            lineHeight={lineHeight}\r\n                        />\r\n                    {/* </g>   */}\r\n                    <RiskSvgTable \r\n                            head={years}\r\n                            topic ={legend}\r\n                            time={time}\r\n                            data={data}\r\n                            color={color}\r\n                            width={width}\r\n                            xScale ={xScale}\r\n                            yScale={yScale}\r\n                            margin={margin}\r\n                            textScale = {textScale}\r\n                            mar = {mar}\r\n                            lineHeight = {lineHeight}\r\n                            // margin={margin}\r\n                            onHover={onHover}\r\n                            hoverOut={hoverOut}\r\n                            clnames={clnames}\r\n                    /> \r\n                     </g>                  \r\n                </svg>\r\n            </Col>\r\n        \r\n        </Row>\r\n        {/* <Row>\r\n            <Col md='12' style={{paddingLeft:'0px'}}>\r\n            <TableLine \r\n                    width={width}\r\n                    margin={margin}\r\n                    xScale ={xScale}\r\n                    yScale = {yScale}\r\n                    scaleOffset = {5}\r\n                    innerHeight={innerHeight}\r\n                />\r\n\r\n                <RiskTable\r\n                    head={years}\r\n                    topic ={legend}\r\n                    time={time}\r\n                    data={data}\r\n                    color={color}\r\n                />\r\n\r\n                <RiskSvgTable />\r\n            </Col>            \r\n        </Row> */}\r\n    </Col>\r\n)\r\n}","import React, { useState } from \"react\"\r\nimport { AiFillQuestionCircle } from \"react-icons/ai\"\r\nimport { Form, Col, Row, InputGroup, FormControl, Button, Image, Modal} from \"react-bootstrap\"\r\nimport * as $ from 'jquery'\r\nimport './Stratification.css'\r\n\r\nlet placeholder = 'https://raw.githubusercontent.com/uic-evl/hnc-predictor/master/src/images/OS/OS_LT5_UT25.jpg'\r\n// let perc = null;\r\n// let risk = null;\r\nexport const Stratification = ({\r\n    lowRef,\r\n    upRef,\r\n    // overallRisk,\r\n    // overallPerc,\r\n    // localRisk,\r\n    // localPerc,\r\n    // regionalRisk,\r\n    // regionalPerc,\r\n    patientClass,\r\n    riskCalculation,\r\n    riskRef\r\n}) =>{\r\n    // console.log(patientClass)\r\n    const [imgSrc, setImgSrc] = useState(placeholder);\r\n\r\n    const onButtonClick = () =>{\r\n        riskCalculation()\r\n        handleChange()\r\n    }\r\n\r\n    const handleChange = () =>{\r\n        \r\n        console.log(riskRef.current.value)\r\n        console.log(upRef.current.value)\r\n        console.log(lowRef.current.value)\r\n\r\n        let folder = riskRef.current.value;\r\n        let lower = lowRef.current.value;\r\n        let upper = upRef.current.value;\r\n\r\n        let imageUrl = `https://raw.githubusercontent.com/uic-evl/hnc-predictor/master/src/images/${folder}/OS_LT${lower}_UT${upper}.jpg`;\r\n        \r\n        setImgSrc(imageUrl)\r\n        $('#imageid').fadeOut('fast')\r\n        $('#imageid').fadeIn(\"slow\");\r\n        \r\n\r\n        // setImgSrc(imageUrl)\r\n    }\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const [riskShow, setriskShow] = useState(false);\r\n\r\n    const handleriskClose = () => setriskShow(false);\r\n    const handleriskShow = () => setriskShow(true);\r\n\r\n    const [imageShow, setImageShow] = useState(false);\r\n\r\n    const handleImageShow = () => setImageShow(true);\r\n    const handleImageClose = () => setImageShow(false);\r\n\r\n    return (\r\n        <Col className='strat' md='4' id=\"stratback\" style={\r\n            {marginLeft:\"1%\", width:\"31%\"}}>\r\n            <Row>\r\n                {/* <Col md='10' id=\"back\"> */}\r\n                    <h4 className='d-flex justify-content-center'>Model-based Stratification</h4>\r\n                    <Row>\r\n                    <Form.Group controlId=\"formGridState\" id='selects'>\r\n                        <Form.Label id=\"riskFormLabel\">Select risk-thresholds <AiFillQuestionCircle onClick={handleShow}/></Form.Label>\r\n                        <Form.Select defaultValue=\"OS\" ref={riskRef} onChange={handleChange}  style={{fontSize: '0.9em'}}>\r\n                        <option value='OS'> Overall Survival (OS) </option>\r\n                        <option value='LC'> Local Control (LC) </option>\r\n                        <option value='RC'> Regional Control (RC) </option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    </Row>\r\n\r\n                    <Modal show={show} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Select risk-thresholds</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>Please select the 2-year risk you select as threshold for \r\n                            low- and high-risk mortality, local and/or regional failure (n.b. these are the inverse of the survival/control\r\n                             risk displayed in the graph).<br/>\r\n                             The default low- and high-risk thresholds are 5% and 25%, which are determined \r\n                             on the large-scale dataset, refer to [link_to_paper]\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n\r\n\r\n\r\n                    <Row>\r\n                        <InputGroup size=\"sm\" id=\"inputs\">\r\n                            <InputGroup.Text id=\"basic-addon1\">Low-risk threshold</InputGroup.Text>\r\n                            <FormControl\r\n                            aria-label=\"lower\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            id=\"lowRef\"\r\n                            ref={lowRef}\r\n                            defaultValue={5}\r\n                            />\r\n                            <InputGroup.Text id=\"basic-addon1\">%</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Row>\r\n                    \r\n                    <Row>\r\n                        <InputGroup size=\"sm\" id=\"inputs\">\r\n                            <InputGroup.Text id=\"basic-addon2\">High-risk threshold</InputGroup.Text>\r\n                            <FormControl\r\n                            aria-label=\"upper\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            id=\"upRef\"\r\n                            ref={upRef}\r\n                            defaultValue={25}\r\n                            />\r\n                            <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Row>\r\n                    \r\n                    <Button variant=\"primary\" \r\n                        size=\"sm\"\r\n                        onClick={onButtonClick}\r\n                        style={{width: '15%', marginLeft: '56%'}}\r\n                        id=\"stratButton\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                {/* </Col> */}\r\n            </Row>\r\n            <Row className='survivalImage'>                \r\n                <Image src={imgSrc} id='imageid'/>\r\n                <AiFillQuestionCircle id=\"headerText\" onClick={handleImageShow}/>\r\n\r\n                <Modal show={imageShow} onHide={handleImageClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Cohort-based Overall Survival</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            This is a visualization of survival curve separation \r\n                            of patients with the low- and high-risk thresholds inputted  \r\n                            above. These curves are based on the MDACC training+test cohort \r\n                            of 2106 head and neck cancer patients.\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleImageClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            </Row>\r\n            {\r\n                patientClass !== null && \r\n                <Row style={{marginLeft: '0%'}}>\r\n                    <p><b>The current patient is classified as: <AiFillQuestionCircle onClick={handleriskShow}/> </b> <br/>\r\n                    <b>{patientClass.overallRisk}-risk</b> for mortality (2y risk = {patientClass.overallPerc}%) <br/>\r\n                    <b>{patientClass.localRisk}-risk</b> for local tumor failure (2y risk = {patientClass.localPerc}%) <br/>\r\n                    <b>{patientClass.regionalRisk}-risk</b> for regional tumor failure (2y risk = {patientClass.regionalPerc}%)</p>\r\n\r\n\r\n                    <Modal show={riskShow} onHide={handleriskClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Current Patient Classification</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>This classification is dependent on the thresholds\r\n                             inputted in the top of this panel\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleriskClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n                </Row>\r\n\r\n            }\r\n        </Col>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport * as d3 from 'd3';\r\n\r\nimport {Container, Row} from 'react-bootstrap'\r\n\r\n// import {post} from 'axios'\r\nimport axios from 'axios';\r\nimport {useState } from 'react';\r\n\r\nimport {FormView} from './components/FormView'\r\nimport {LineView} from './components/LineView/LineView'\r\nimport { Stratification } from './components/Stratification/Stratification';\r\n\r\nlet stage_new = null\r\nlet stage_new_7th  = null\r\n\r\nconst createArrayRange = (start, end, step) => {\r\n  let result = []\r\n  for (let i = start; i < end; i = i + step) {\r\n      result.push(+i.toFixed(1));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst time = Array.from(createArrayRange(0,10,0.1))\r\n\r\nconst yearIndex = time.indexOf(2)\r\nlet tRef = \"T4\";\r\nlet nRef = \"N2c\";\r\n\r\nfunction App() {\r\n  const size = useWindowResize();\r\n\r\n  const ageRef = React.createRef();\r\n  const perfScoreRef = React.createRef();\r\n  const packRef = React.createRef();\r\n  const siteRef = React.createRef();\r\n  const hpvRef = React.createRef();\r\n  const riskRef = React.createRef();\r\n\r\n  let lowRef = React.createRef()\r\n  let upRef = React.createRef()\r\n\r\n  const [prediction, setPrediction] = useState(null)\r\n  const [patientClass, setPatientClass] = useState(null)\r\n  const [ajccStage, setAjccStage] = useState('III')\r\n\r\n  const riskCalculation = () => {\r\n    let riskValues = {}\r\n    if(prediction){\r\n      // console.log(d3.select('#lowRef').node().value)\r\n      let low, up;\r\n      if(lowRef.current === null){\r\n        low = d3.select('#lowRef').node().value\r\n        up = d3.select('#upRef').node().value\r\n      }else{\r\n        low = lowRef.current.value;  \r\n        up = upRef.current.value;     \r\n  \r\n      }\r\n      let overallSurv = prediction[0][0]  \r\n      let twoYearOverall = overallSurv[yearIndex] * 100  \r\n      let overallMortality = Math.round(100 - twoYearOverall);\r\n  \r\n      if (overallMortality < low){\r\n          riskValues.overallRisk = 'Low'\r\n      }else if(overallMortality >= low && overallMortality <= up){\r\n          riskValues.overallRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.overallRisk = 'High'\r\n      }\r\n\r\n      riskValues.overallPerc = overallMortality\r\n  \r\n      let localServ = prediction[1][0]  \r\n      let twoYearLocal = localServ[yearIndex] * 100\r\n      let localMortality = Math.round(100 - twoYearLocal);\r\n  \r\n      if (localMortality < low){\r\n          riskValues.localRisk = 'Low'\r\n      }else if(localMortality >= low && localMortality <= up){\r\n          riskValues.localRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.localRisk = 'High'\r\n      }\r\n  \r\n      riskValues.localPerc = localMortality\r\n\r\n      let regionalSurv = prediction[2][0]  \r\n      let twoYearRegional = regionalSurv[yearIndex] * 100\r\n      let regionalMortality = Math.round(100 - twoYearRegional);\r\n  \r\n      if (regionalMortality < low){\r\n          riskValues.regionalRisk = 'Low'\r\n      }else if(regionalMortality >= low && regionalMortality <= up){\r\n          riskValues.regionalRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.regionalRisk = 'High'\r\n      }\r\n\r\n      riskValues.regionalPerc = regionalMortality;\r\n\r\n      setPatientClass(riskValues)\r\n    }\r\n\r\n}\r\n  const onTChange = (event) =>{\r\n    tRef = event.target.value;\r\n    // console.log(tRef)\r\n    updateAjccStage()\r\n  }\r\n  const onNChange = (event) =>{\r\n    nRef = event.target.value;\r\n    // console.log(nRef)\r\n    updateAjccStage()\r\n  }\r\n\r\n\r\n  const handleButtonClick = () =>{\r\n    console.log(\"i am clicked\")\r\n    let val = {\r\n      \"AGE\": ageRef.current.value,\r\n      \"Performance_score\": perfScoreRef.current.value,\r\n      \"pack_years\": packRef.current.value,\r\n      \"site\" : siteRef.current.value,\r\n      // \"T_stage_LC\" : tlcRef,\r\n      \"T_stage\" : tRef,\r\n      \"N_stage\" : nRef,\r\n      \"HPV.P16.status\" : hpvRef.current.value\r\n    }\r\n    axios.post(\r\n      // 'https://risk-calculator.evl.uic.edu:8080/backend',\r\n      'http://127.0.0.1:8000/backend',\r\n      {data:val}\r\n    ).then((response) => {\r\n\r\n      stage_new = response.data[0]\r\n      stage_new_7th = response.data[1]\r\n      // console.log(stage_new)\r\n\r\n      let predData = [response.data[2], response.data[3], response.data[4]]\r\n\r\n      setPrediction(predData)\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n    });\r\n\r\n  }\r\n\r\n  const updateAjccStage = () =>{\r\n    // console.log(\"update ajcc stage called\")\r\n    // console.log(tRef, nRef)\r\n    // console.log([1].includes(1))\r\n    let site = siteRef.current.value;\r\n    let hpv = hpvRef.current.value;\r\n    // console.log(site, hpv)\r\n    if(site === 'OPC' && hpv === 'Positive'){\r\n      if(['T0', 'T1', 'T2', 'Tx'].includes(tRef) && ['N0', 'N1', 'N2a-b'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T0', 'T1', 'T2', 'Tx'].includes(tRef) && ['N2c'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T3'].includes(tRef) && ['N0', 'N1', 'N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T4'].includes(tRef) || ['N3'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }\r\n    }else if((site === 'OPC' && hpv === 'Negative') || [\"Oral Cavity\",\"Hypopharynx\",\"Larynx\"].includes(site)){\r\n      if(['N3'].includes(nRef)){\r\n        setAjccStage('IVb')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T2'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T1', 'T2', 'Tx'].includes(tRef) && ['N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T3'].includes(tRef) && ['N0','N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T4'].includes(tRef) || ['N2a-b','N2c'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }\r\n    }else if(site === 'Nasopharynx'){\r\n      if(['T0', 'T1', 'Tx'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N1'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T2'].includes(tRef) && ['N0', 'N1'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T2', 'T3'].includes(tRef) && ['N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T3'].includes(tRef) && ['N0', 'N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T4'].includes(tRef) || ['N3'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }\r\n    }else if(site=== 'unknown_primary'){\r\n      if(['N1', 'N2a-b'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['N2c'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }else if(['N3'].includes(nRef)){\r\n        setAjccStage('IVb')\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    riskCalculation();\r\n  }, [prediction])\r\n\r\n\r\n\r\n  if(!prediction){\r\n    return (\r\n      <Container fluid>\r\n      <Row>\r\n        <FormView \r\n          onButtonClick={handleButtonClick}\r\n          ageRef={ageRef}\r\n          perfScoreRef = {perfScoreRef}\r\n          packRef = {packRef}\r\n          siteRef = {siteRef}\r\n          // tlcRef = {onTLChange}\r\n          tRef = {onTChange}\r\n          nRef = {onNChange}\r\n          hpvRef = {hpvRef}\r\n          stage = {ajccStage}\r\n          stageUpdate = {updateAjccStage}\r\n          riskCalculation={riskCalculation}\r\n        />\r\n      </Row>\r\n    </Container>\r\n    );\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <Container fluid className='contain' >\r\n    <Row>\r\n      <FormView\r\n        onButtonClick={handleButtonClick}\r\n        ageRef={ageRef}\r\n        perfScoreRef = {perfScoreRef}\r\n        packRef = {packRef}\r\n        siteRef = {siteRef}\r\n        // tlcRef = {onTLChange}\r\n        tRef = {onTChange}\r\n        nRef = {onNChange}\r\n        hpvRef = {hpvRef}\r\n        stage = {ajccStage}\r\n        stageUpdate = {updateAjccStage}\r\n        riskCalculation={riskCalculation}\r\n      />\r\n      <LineView \r\n        data={prediction}\r\n        time={time}\r\n        windowHeight={size.height}\r\n        windowWidth={size.width}\r\n      />\r\n      <Stratification\r\n        // yrIndex = {yearIndex}\r\n        // data ={prediction[2][0]}\r\n        riskCalculation={riskCalculation}\r\n        // overallRisk={overallRisk}\r\n        // overallPerc={overallPerc}\r\n        // localRisk={localRisk}\r\n        // localPerc={localPerc}\r\n        // regionalRisk={regionalRisk}\r\n        // regionalPerc={regionalPerc}\r\n        patientClass = {patientClass}\r\n        lowRef={lowRef}\r\n        upRef={upRef}\r\n        riskRef = {riskRef}\r\n      />\r\n    </Row>\r\n  </Container>\r\n  );\r\n}\r\n\r\n\r\nfunction useWindowResize(){\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}