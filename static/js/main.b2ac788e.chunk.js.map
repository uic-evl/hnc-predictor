{"version":3,"sources":["components/FormView.js","components/LineView/AxisBottom.js","components/LineView/CreateBottomAxis.js","components/LineView/AxisLeft.js","components/LineView/CreateLeftAxis.js","components/LineView/LinePlot.js","components/LineView/CreateLegends.js","components/LineView/CreateLinePlots.js","components/LineView/RiskSvgTable.js","components/LineView/TableLine.js","components/LineView/LineView.js","components/Stratification/Stratification.js","App.js","reportWebVitals.js","index.js"],"names":["FormView","onButtonClick","ageRef","perfScoreRef","packRef","siteRef","tRef","nRef","hpvRef","stage","stageUpdate","useState","ajccShow","setajccShow","handleajccClose","Col","className","md","Form","id","Group","controlId","Label","Select","defaultValue","ref","value","onChange","Check","inline","label","name","type","defaultChecked","onClick","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AxisBottom","xScale","yScale","scaleOffset","innerHeight","range","xStart","xEnd","yEnd","ticks","transform","x1","x2","y1","y2","map","t","i","x","Fragment","y","CreateBottomAxis","innerWidth","xAxisLabelOffset","xAxisLabel","textAnchor","AxisLeft","yStart","CreateLeftAxis","yAxisLabelOffset","yAxisLabel","LinePlot","classVal","data","color","time","onHover","hoverOut","fill","stroke","strokeWidth","onMouseEnter","onMouseOut","d","line","CreateLegends","clnames","margin","legendOffset","legendSize","textPaddingX","textPaddingY","legend","bottom","right","width","height","CreateLinePlots","pred","padX","padY","padX2","off","RiskSvgTable","head","topic","textScale","mar","lineHeight","w","xxStart","xxEnd","role","tt","j","xx","fontSize","index","indexOf","val","Math","round","TableLine","dotOffset","top","left","years","LineView","windowHeight","windowWidth","svgheight","scaleLinear","domain","scaleOrdinal","d3","style","setShow","handleClose","Row","paddingLeft","Stratification","lowRef","upRef","patientClass","riskCalculation","riskRef","imgSrc","setImgSrc","handleChange","console","log","current","folder","lower","upper","imageUrl","$","fadeOut","fadeIn","riskShow","setriskShow","handleriskClose","imageShow","setImageShow","handleImageClose","marginLeft","InputGroup","size","Text","FormControl","Image","src","overallRisk","overallPerc","localRisk","localPerc","regionalRisk","regionalPerc","Array","from","start","end","step","result","push","toFixed","createArrayRange","yearIndex","App","window","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowResize","React","createRef","prediction","setPrediction","setPatientClass","ajccStage","setAjccStage","riskValues","low","up","node","twoYearOverall","overallMortality","twoYearLocal","localMortality","twoYearRegional","regionalMortality","onTChange","event","target","updateAjccStage","onNChange","handleButtonClick","post","then","response","predData","catch","error","site","hpv","includes","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2ac788e.chunk.js","sourcesContent":["import { Form, Col, Button, Modal } from \"react-bootstrap\"\r\nimport { useState } from \"react\"\r\n\r\nimport { AiFillQuestionCircle } from \"react-icons/ai\"\r\n\r\nimport './FormView.css'\r\n\r\nexport   const FormView = ({\r\n  onButtonClick, \r\n  ageRef, \r\n  perfScoreRef, \r\n  packRef, \r\n  siteRef, \r\n  // tlcRef, \r\n  tRef, \r\n  nRef, \r\n  hpvRef,\r\n  stage,\r\n  stageUpdate\r\n}) =>{\r\n  const [ajccShow, setajccShow] = useState(false);\r\n\r\n  const handleajccClose = () => setajccShow(false);\r\n  const handleajccShow = () => setajccShow(true);\r\n\r\n  return(\r\n    <Col className='d-flex justify-content-start'  md=\"2\" >\r\n      <Form id=\"inputback\" className=\"formPadding\"> \r\n      <h4>Input Variables</h4>\r\n\r\n      <h6 id=\"textIndent\">Patient Specifics</h6>\r\n\r\n      <Form.Group controlId=\"formGridState\" id=\"space\">\r\n        <Form.Label>Age</Form.Label>\r\n        <Form.Select defaultValue=\"65-75\" ref={ageRef} id=\"indent\">\r\n          <option value='<55'> &#60; 55 </option>\r\n          <option value='55-65'> 55 - 65 </option>\r\n          <option value='65-75'> 65 - 75 </option>\r\n          <option value='>75'> &#62; 75</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label >Performance Score</Form.Label>\r\n        <Form.Select defaultValue=\"0\" ref={perfScoreRef} id=\"indent\">\r\n          <option value='0'>0</option>\r\n          <option value='1'>1</option>\r\n          <option value='>2'>&#62; 2</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>Pack Years</Form.Label>\r\n        <Form.Select defaultValue=\"25-50\" ref={packRef} id=\"indent\">\r\n          <option value='<5'> &#60; 5 </option>\r\n          <option value='5-25'> 5 - 25</option>\r\n          <option value='25-50'> 25 - 50 </option>\r\n          <option  value='>50'> &#62; 50 </option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <h6 id='space'>Tumor Specifics</h6>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>Tumor Site</Form.Label>\r\n        <Form.Select defaultValue=\"OPC\" ref={siteRef} id=\"indent\" onChange={stageUpdate}>\r\n          <option value='OPC'> OPC </option>\r\n          <option value='Hypopharynx'> Hypopharynx </option>\r\n          <option value='Oral Cavity'> Oral Cavity </option>\r\n          <option value='Larynx'> Larynx </option>\r\n          <option value='Nasopharynx'> Nasopharynx </option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      <Form.Group >\r\n        <Form.Label id='space'>T Stage</Form.Label>\r\n        <br/>\r\n        <Form.Check\r\n          inline\r\n          label=\"T1\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-1`}\r\n          value=\"T1\"\r\n          onChange={tRef}\r\n          className=\"radin\"\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"T2\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-2`}\r\n          value=\"T2\"\r\n          onChange={tRef}\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"T3\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-3`}\r\n          value=\"T3\"\r\n          onChange={tRef}\r\n          defaultChecked\r\n        />\r\n\r\n        <Form.Check\r\n          inline\r\n          label=\"T4\"\r\n          name=\"TGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-4`}\r\n          value=\"T4\"\r\n          onChange={tRef}\r\n          className=\"radin\"\r\n          defaultChecked\r\n        />\r\n      </Form.Group>\r\n\r\n\r\n      <Form.Group >\r\n        <Form.Label id='space'>N Stage</Form.Label>\r\n        <br/>\r\n        <Form.Check\r\n          inline\r\n          label=\"N0\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-1`}\r\n          value=\"N0\"\r\n          onChange={nRef}\r\n          className=\"radin\"\r\n        />\r\n\r\n        <Form.Check\r\n          inline\r\n          label=\"N1\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-2`}\r\n          value=\"N1\"\r\n          onChange={nRef}\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N2a-b\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-3`}\r\n          value=\"N2a-b\"\r\n          onChange={nRef}\r\n          defaultChecked\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N2c\"\r\n          name=\"NGroup\"\r\n          type=\"radio\"\r\n          id={`inline-radio-4`}\r\n          value=\"N2c\"\r\n          onChange={nRef}\r\n          className=\"radin\"\r\n          defaultChecked\r\n        />\r\n        <Form.Check\r\n          inline\r\n          label=\"N3\"\r\n          name='NGroup'\r\n          type=\"radio\"\r\n          id={`inline-radio-5`}\r\n          value=\"N3\"\r\n          onChange={nRef}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formGridState\" id='space'>\r\n        <Form.Label>HPV Status</Form.Label>\r\n        <Form.Select defaultValue=\"Positive\" ref={hpvRef} id=\"indent\" onChange={stageUpdate}>\r\n          <option value='Positive'> Positive </option>\r\n          <option value='Negative'>Negative</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n      <br/>\r\n      {\r\n        stage !== null &&\r\n        <div id='textIndent'>\r\n          AJCC<sup>8th</sup> stage:  <b>{stage}</b> <AiFillQuestionCircle onClick={handleajccShow}/>\r\n\r\n          <Modal show={ajccShow} onHide={handleajccClose}>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>AJCC<sup>8th</sup> stage</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              This AJCC <sup>8th</sup> staging is generated from the T-stage, \r\n              N-stage, tumor site and HPV-status input with in-house \r\n              developed algorithm. Details can be found in the \r\n              supplementary data of the manuscript [link_to_paper]\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleajccClose}>\r\n                Close\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </div>\r\n        \r\n      }\r\n      <br/>\r\n      \r\n      <Button variant=\"primary\"\r\n        onClick={onButtonClick}\r\n        id='textIndent'\r\n      >\r\n        Submit\r\n      </Button>\r\n      </Form>\r\n\r\n    </Col>\r\n  )}","import React from \"react\";\r\n\r\nexport const AxisBottom = ({xScale, yScale, scaleOffset, innerHeight}) => {\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    return (\r\n        <g transform={`translate(0, ${innerHeight})`}>\r\n            <line className='axisLine' x1={xStart} x2={xEnd} y1={yEnd} y2={yEnd} />\r\n            <g className=\"ticks\">\r\n                {ticks.map((t, i) => {\r\n                    const x = xScale(t);\r\n                    return (\r\n                    <React.Fragment key={i}>\r\n                        <line x1={x} x2={x} y1={yEnd} y2={yEnd + scaleOffset}/>\r\n                        <text\r\n                        x={x}\r\n                        y={yEnd + scaleOffset * 5}\r\n                        >\r\n                        {t}\r\n                        </text>\r\n                    </React.Fragment>\r\n                    );\r\n                })}\r\n            </g>\r\n        </g>\r\n    );\r\n};","import { AxisBottom } from \"./AxisBottom\"\r\nexport const CreateBottomAxis = ({\r\n    xScale,\r\n    yScale,\r\n    innerHeight,\r\n    innerWidth,\r\n    xAxisLabelOffset,\r\n    xAxisLabel,\r\n    scaleOffset\r\n}) => {\r\n    return(\r\n        <>\r\n            <AxisBottom \r\n                xScale ={xScale}\r\n                yScale = {yScale}\r\n                scaleOffset = {scaleOffset}\r\n                innerHeight={innerHeight}\r\n            />\r\n\r\n            <text\r\n                className='axis-label'\r\n                x={innerWidth / 2}\r\n                y={innerHeight + xAxisLabelOffset}\r\n                textAnchor='middle'\r\n            >{xAxisLabel}</text>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const AxisLeft = ({xScale, yScale, scaleOffset}) => {\r\n    const [xStart, ] = xScale.range();\r\n    const [yStart, yEnd] = yScale.range();\r\n    const ticks = yScale.ticks();\r\n    return (\r\n        <>\r\n            <line className={'axisLine'} x1={xStart} x2={xStart} y1={yEnd} y2={yStart} /> \r\n            <g className=\"ticks\">\r\n                {ticks.map((t, i) => {\r\n                    const y = yScale(t);\r\n                    return (\r\n                    <React.Fragment key={i}>\r\n                        <line x1={xStart} x2={xStart - scaleOffset} y1={y} y2={y}/>\r\n                        <text\r\n                        x={xStart - scaleOffset * 4}\r\n                        y={y + scaleOffset * 1.25}\r\n                        >\r\n                        {t * 100}\r\n                        </text>\r\n                    </React.Fragment>\r\n                    );\r\n                })}\r\n            </g>\r\n        </>\r\n    );\r\n};","import { AxisLeft } from \"./AxisLeft\"\r\n\r\nexport const CreateLeftAxis = ({\r\n    xScale,\r\n    yScale,\r\n    yAxisLabelOffset,\r\n    yAxisLabel,\r\n    scaleOffset,\r\n    innerHeight\r\n}) => {\r\n    return (\r\n        <>\r\n            <AxisLeft \r\n                xScale={xScale}\r\n                yScale = {yScale}\r\n                // innerWidth={innerWidth}\r\n                scaleOffset = {scaleOffset}\r\n            />\r\n            \r\n            <text\r\n                className='axis-label'       \r\n                textAnchor='middle'\r\n                transform={`translate(${-yAxisLabelOffset}, ${innerHeight / 2} )rotate(-90)`}\r\n            >{yAxisLabel}</text>\r\n        </>\r\n    )\r\n}","import { curveNatural, line } from \"d3\";\r\n\r\nexport const LinePlot = ({\r\n    classVal,\r\n    data, \r\n    xScale, \r\n    yScale, \r\n    color,\r\n    time ,\r\n    onHover,\r\n    hoverOut\r\n    }) => {\r\n        // console.log(\"in line plot\")\r\n        // console.log(data[0])\r\n        return(\r\n        <g className='mark'> \r\n            <path \r\n                className = {classVal}\r\n                id = \"line-plot\"\r\n                fill=\"none\"\r\n                stroke={color}\r\n                strokeWidth={\"2px\"}\r\n                onMouseEnter={() => onHover(classVal)}\r\n                onMouseOut={() => hoverOut()}\r\n                d={line()\r\n                    .x((d,i) => {\r\n                        // console.log(\"line plot d\")\r\n                        // console.log(d)\r\n                        return xScale(time[i])\r\n                    })\r\n                    .y((d,i) => {\r\n                        // console.log(\"line plot i\")\r\n                        // console.log(time[i])\r\n                        return yScale(d)\r\n                    })\r\n                    // .curve(curveNatural)\r\n                    (data[0])}\r\n            />\r\n        </g>\r\n    )};","export const CreateLegends = ({\r\n    onHover,\r\n    clnames,\r\n    hoverOut,\r\n    innerWidth,\r\n    innerHeight,\r\n    margin,\r\n    legendOffset,\r\n    legendSize,\r\n    color,\r\n    textPaddingX,\r\n    textPaddingY,\r\n    legend,\r\n    i\r\n}) => {\r\n    return(\r\n        <g\r\n            className='legend'\r\n            transform={`translate(0, ${innerHeight - margin.bottom})`}\r\n            onMouseEnter={() => onHover(clnames[i])}\r\n            onMouseOut = {() => hoverOut()}\r\n        >\r\n            <rect\r\n                x = {(margin.right)}\r\n                y = {legendOffset * i - 10}\r\n                width = {legendSize}\r\n                height = {legendSize}\r\n                fill = {color(i)}\r\n            />\r\n            <text\r\n                x = {textPaddingX + (margin.right)}\r\n                y = {textPaddingY + (legendOffset * i) - 10}\r\n            >\r\n                {`${legend[i]}`}\r\n            </text>\r\n\r\n        </g>\r\n    )\r\n}","import { LinePlot } from \"./LinePlot\"\r\nimport { CreateLegends } from \"./CreateLegends\"\r\n\r\nexport const CreateLinePlots = ({\r\n    data,\r\n    clnames,\r\n    xScale,\r\n    yScale,\r\n    color,\r\n    time,\r\n    onHover,\r\n    hoverOut,\r\n    innerWidth,\r\n    innerHeight,\r\n    margin,\r\n    legendOffset,\r\n    legendSize,\r\n    textPaddingX,\r\n    textPaddingY,\r\n    legend\r\n}) => {\r\n    return(\r\n        data.map((pred, i) =>{ \r\n            // console.log(i)\r\n            // console.log(color(i))\r\n            return(\r\n            <>\r\n                <LinePlot \r\n                    key={i}\r\n                    classVal={clnames[i]}\r\n                    data={pred}\r\n                    xScale = {xScale}\r\n                    yScale = {yScale}\r\n                    color={color(i)}\r\n                    time={time}\r\n                    onHover={onHover}\r\n                    hoverOut={hoverOut}\r\n                />\r\n\r\n                <CreateLegends \r\n                    onHover={onHover}\r\n                    clnames={clnames}\r\n                    hoverOut={hoverOut}\r\n                    innerWidth={innerWidth}\r\n                    innerHeight={innerHeight}\r\n                    margin={margin}\r\n                    legendOffset={legendOffset}\r\n                    legendSize={legendSize}\r\n                    color={color}\r\n                    textPaddingX={textPaddingX}\r\n                    textPaddingY={textPaddingY}\r\n                    legend={legend}\r\n                    i={i}\r\n                />\r\n\r\n            </>\r\n\r\n        )})\r\n    )\r\n}","import React from \"react\";\r\nimport { line, scaleLinear, scaleOrdinal } from \"d3\"\r\nimport { Col, Table } from \"react-bootstrap\"\r\nimport './RiskSvgTable.css'\r\n\r\nconst padX = 82\r\nconst padY = 30\r\nconst padX2 = 20\r\nconst strokeWidth = 1\r\nconst padW = 3\r\nconst padH = 8\r\nconst scaleOffset = 2\r\nconst off = 10\r\nexport const RiskSvgTable = ({\r\n    head,\r\n    topic,\r\n    time,\r\n    data,\r\n    color,\r\n    xScale,\r\n    yScale,\r\n    textScale,\r\n    mar,\r\n    lineHeight,\r\n    onHover,\r\n    hoverOut,\r\n    clnames\r\n}) =>{\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    // const textticks = textScale.ticks();\r\n\r\n    // console.log(textticks)\r\n    // let storeXX = 0\r\n    // x1={x + padY - scaleOffset} \r\n    // x={xStart - padX - off} \r\n\r\n    let w = (xScale(ticks[0]) + padY + 2) - (xStart - padX - off)\r\n\r\n    \r\n    const [xxStart, xxEnd] = textScale.range()\r\n\r\n    return (\r\n        // <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 370 160\">\r\n\r\n            <g id='rowGroup' transform={`translate(0, ${mar})`} role=\"table\">\r\n                {\r\n                    topic.map((tt, j) =>{\r\n                        const xx = textScale(j)    \r\n                        // storeXX = xx                     \r\n                        // console.log(j, xx)\r\n                        return(\r\n                            <>\r\n                            <rect \r\n                                x={xStart - padX - off} \r\n                                y={xx - padY} \r\n                                width={w} \r\n                                height={lineHeight + padH}\r\n                                fill={\"white\"}\r\n                                onMouseEnter={() => onHover(clnames[j])}\r\n                                onMouseOut={() => hoverOut()}\r\n                            />\r\n                            <line \r\n                                x1={xStart - padX - off} \r\n                                x2={xEnd + padX2 + padH} \r\n                                y1={xx - padY} \r\n                                y2={xx - padY}  \r\n                                stroke={'black'} \r\n                                strokeWidth={strokeWidth}\r\n                            />\r\n                            <text x={xStart} y={xx} fontSize='1em' textAnchor='middle' role=\"row\"> \r\n                                {\r\n\r\n                                    head.map((t, i) => {\r\n                                        // if(t !== 10){\r\n                                            const x = xScale(i);\r\n                                            if(i === 0){\r\n                                                return(\r\n                                                    <tspan\r\n                                                    x={x - padX2 - 10}\r\n                                                    role='cell'\r\n                                                    stroke=\"black\"\r\n                                                    strokeWidth={0.5}\r\n                                                    onMouseEnter={() => onHover(clnames[j])}\r\n                                                    onMouseOut={() => hoverOut()}\r\n                                                    >\r\n                                                    {tt}\r\n                                                    </tspan>\r\n\r\n                                                )\r\n                                            }else{\r\n                                                // console.log(t)\r\n                                                let index = time.indexOf(t)\r\n                                                let datum = data[j][0]\r\n                                                let val = datum[index] * 100\r\n                                                val = Math.round(val)\r\n                                                return (\r\n                                                    <React.Fragment key={i}>\r\n                                                        <tspan\r\n                                                            x={x}\r\n                                                            role='cell'\r\n                                                        >\r\n                                                        {val}\r\n                                                        </tspan>\r\n                                                    </React.Fragment>\r\n                                                );\r\n\r\n                                            }\r\n                                            \r\n                                        // }\r\n                                        \r\n                                    })\r\n\r\n                                }                            \r\n                            </text>\r\n                            </>\r\n                        )\r\n                    })\r\n                    }   \r\n                                \r\n                <line \r\n                    x1={xStart - padX - off} \r\n                    x2={xEnd + padX2 + padH} \r\n                    y1={xxEnd + padH + lineHeight - padY} \r\n                    y2={xxEnd + padH + lineHeight - padY}  \r\n                    stroke={'black'}\r\n                    strokeWidth={strokeWidth}\r\n                /> \r\n                <g>\r\n                    <line \r\n                            x1={xStart + padY + scaleOffset + off} \r\n                            x2={xStart + padY + scaleOffset + off} \r\n                            y1={xxEnd + padH + lineHeight + 2 - padY} \r\n                            y2={xxEnd + padH + lineHeight + off - padY}\r\n                            stroke={'black'}\r\n                            strokeWidth={strokeWidth * 1.5}\r\n                        />\r\n                    <line \r\n                        x1={xEnd + padX2} \r\n                        x2={xEnd + padX2} \r\n                        y1={xxEnd + padH + lineHeight + 2 - padY} \r\n                        y2={xxEnd + padH + lineHeight + off - padY}\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    />\r\n                    <line \r\n                        x1={xStart + padY + scaleOffset + off} \r\n                        x2={xEnd + padX2 } \r\n                        y1={xxEnd + padH + lineHeight + off - padY} \r\n                        y2={xxEnd + padH + lineHeight + off - padY}  \r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    /> \r\n                    <line \r\n                        x1={xScale(4) + padY - scaleOffset} \r\n                        x2={xScale(4) + padY - scaleOffset} \r\n                        y1={xxEnd + padH + lineHeight + off - padY} \r\n                        y2={xxEnd + padH + lineHeight - 10 }\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth * 1.5}\r\n                    />\r\n\r\n                    <text\r\n                        className='axis-label'\r\n                        x={xScale(5) - 15}\r\n                        y={xxEnd + padH + lineHeight + 7}\r\n                        textAnchor='middle'\r\n                    >{`Cumulative Probability (%)`}</text>\r\n                </g>\r\n                {/* <rect x='25' y='40' width='310' height='20' fill='gainsboro'/>\r\n                <rect x='25' y='76' width='310' height='20' fill='gainsboro'/> */}                \r\n\r\n                <g>\r\n                    <line \r\n                        x1={- xStart - padX - off + padW} \r\n                        x2={- xStart - padX - off + padW} \r\n                        y1={xxStart - padY} \r\n                        y2={xxEnd + padH + lineHeight - padY}\r\n                        stroke={'black'}\r\n                        strokeWidth={strokeWidth}\r\n                    />\r\n                    {ticks.map((t, i) => {\r\n                        const x = xScale(t);\r\n                        if( i === 0){\r\n                            return (\r\n                                <React.Fragment key={i}>\r\n                                    <line \r\n                                        x1={x + padY + scaleOffset} \r\n                                        x2={x + padY + scaleOffset} \r\n                                        y1={xxStart - padY} \r\n                                        y2={xxEnd + padH + lineHeight - padY}\r\n                                        stroke={'black'}\r\n                                        strokeWidth={strokeWidth}\r\n                                    />\r\n                                </React.Fragment>\r\n                                );\r\n\r\n                        }else{\r\n                            return (\r\n                                <React.Fragment key={i}>\r\n                                    <line \r\n                                        x1={x + padY - scaleOffset} \r\n                                        x2={x + padY - scaleOffset} \r\n                                        y1={xxStart - padY} \r\n                                        y2={xxEnd + padH + lineHeight - padY}\r\n                                        stroke={'black'}\r\n                                        strokeWidth={strokeWidth}\r\n                                    />\r\n                                </React.Fragment>\r\n                                );\r\n                        }\r\n                            \r\n                    })}\r\n                </g>\r\n\r\n            </g>\r\n            // </svg>\r\n    )\r\n}","import React from \"react\";\r\nimport './TableLine.css'\r\nexport const TableLine = ({\r\n    width,\r\n    margin,\r\n    xScale, \r\n    yScale, \r\n    scaleOffset, \r\n    innerHeight,\r\n    dotOffset,\r\n    lineHeight\r\n}) => {\r\n    const [xStart, xEnd] = xScale.range();\r\n    const [, yEnd] = yScale.range();\r\n    const ticks = xScale.ticks();\r\n    // if(window.innerHeight <= 750){\r\n    //     // normal laptop\r\n    //     height = window.innerHeight - (window.innerHeight / 1.6)\r\n    // }else{\r\n    //     height = window.innerHeight - (window.innerHeight / 1.35)\r\n\r\n    // } \r\n    // console.log(window.innerHeight)\r\n    return (\r\n        <g transform={`translate(0, ${innerHeight + dotOffset})`}>\r\n                    <g className=\"ticks\">\r\n                        {ticks.map((t, i) => {\r\n                            if(t !== 0){\r\n                                const x = xScale(t);\r\n                                return (\r\n                                <React.Fragment key={i}>\r\n                                    {/* <line x1={x} x2={x} y1={yEnd} y2={yEnd + lineHeight} id='tbl'/> */}\r\n                                    <text\r\n                                    x={x}\r\n                                    y={yEnd + lineHeight + scaleOffset * 5}\r\n                                    >\r\n                                    {t}\r\n                                    </text>\r\n                                </React.Fragment>\r\n                                );\r\n                            }\r\n                            \r\n                        })}\r\n                    </g>\r\n\r\n        </g>\r\n\r\n    );\r\n}","import { Col, Row, Button, Modal } from \"react-bootstrap\"\r\nimport {AiFillQuestionCircle} from 'react-icons/ai'\r\n\r\nimport { useState } from \"react\"\r\n\r\nimport { line, scaleLinear, scaleOrdinal } from \"d3\"\r\n\r\nimport * as d3 from 'd3'\r\n\r\nimport { CreateBottomAxis } from \"./CreateBottomAxis\"\r\nimport { CreateLeftAxis } from \"./CreateLeftAxis\"\r\nimport { CreateLinePlots } from \"./CreateLinePlots\"\r\n\r\nimport { RiskTable } from \"./RiskTable\"\r\nimport { RiskSvgTable } from \"./RiskSvgTable\"\r\nimport { TableLine } from \"./TableLine\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst margin = {top:20, right:30, bottom:65, left:90} \r\n\r\nconst xAxisLabelOffset = 50\r\nconst yAxisLabelOffset = 40\r\n\r\nconst xAxisLabel = 'Time (years)'\r\nconst yAxisLabel = 'Predicted Risk (%)'\r\n\r\nconst legend = ['Overall Survival', \"Local Control\", \"Regional Control\"]\r\nconst clnames = ['overall', 'local', 'region']\r\n\r\nconst textPaddingX = 15\r\nconst textPaddingY = 10\r\n\r\nconst legendSize = 10\r\nconst legendOffset = 20\r\n\r\nconst scaleOffset = 5\r\nconst dotOffset = 10\r\nconst lineHeight = 50\r\nconst svgtableOffset = 20\r\n\r\nconst years = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nconst tableHeight = 205;\r\n\r\nexport const LineView = ({data, time, windowHeight, windowWidth}) => {\r\n\r\n    const width = windowWidth / 2\r\n    const svgheight = windowHeight - 50\r\n    const height = windowHeight / 1.75\r\n\r\n    // console.log(windowWidth,windowHeight)\r\n    \r\n    const innerHeight = height - margin.top - margin.bottom\r\n    const innerWidth = width - margin.left - margin.right\r\n\r\n    // let tableHeight = window.innerHeight - (window.innerHeight / 1.75) - lineHeight - scaleOffset - dotOffset - svgtableOffset\r\n\r\n    const mar = innerHeight + lineHeight + (scaleOffset * 2)  + margin.bottom\r\n\r\n    // console.log(tableHeight)\r\n    const textScale = scaleLinear()\r\n        .domain([0, 2])\r\n        .range([0, tableHeight - margin.bottom - margin.top])\r\n\r\n    // console.log(years)\r\n    // console.log(time)\r\n\r\n    // console.log(time)\r\n    const xScale = scaleLinear()\r\n    .domain([0, 10])\r\n    .range([0, innerWidth])\r\n    // .nice()\r\n\r\n    const yScale = scaleLinear()\r\n        .domain([0, 1])\r\n        .range([innerHeight, 0])\r\n        // .nice()\r\n\r\n\r\n    const color = scaleOrdinal()\r\n        .domain([0, 1])\r\n        .range([\"#984ea3\", \"#377eb8\", '#d95f02'])\r\n\r\n    const onHover = (val) => {\r\n        // console.log(val)\r\n        d3.selectAll('#line-plot').style('opacity', 0.2)\r\n        d3.select(`.${val}`).style('opacity', 1)\r\n        \r\n    }\r\n\r\n    const hoverOut = () => {\r\n        d3.selectAll('#line-plot').style('opacity', 1)\r\n    }\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    \r\n    return(\r\n    <Col className=\"linePlot\" md=\"6\" id=\"outback\">\r\n        <Row>\r\n            <Col md='12' style={{paddingLeft:'0px'}}>\r\n                <h4 className='d-flex justify-content-center'>Outcome Prediction <AiFillQuestionCircle onClick={handleShow}/></h4>\r\n\r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>Outcome Prediction</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>The outcome curves are based on the clinical models developed and validated \r\n                        on an international dataset &#62; 4500 patients [link_to_paper]\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <svg width={width} height={svgheight}>\r\n                    <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n\r\n                        <CreateBottomAxis \r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            innerHeight={innerHeight}\r\n                            innerWidth={innerWidth}\r\n                            xAxisLabelOffset={xAxisLabelOffset}\r\n                            xAxisLabel={xAxisLabel}\r\n                            scaleOffset={scaleOffset}\r\n                        />\r\n\r\n                        <CreateLeftAxis \r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            yAxisLabelOffset={yAxisLabelOffset}\r\n                            yAxisLabel={yAxisLabel}\r\n                            scaleOffset={scaleOffset}\r\n                            innerHeight={innerHeight}\r\n                        />\r\n\r\n                        <CreateLinePlots \r\n                            data={data}\r\n                            clnames={clnames}\r\n                            xScale={xScale}\r\n                            yScale={yScale}\r\n                            color={color}\r\n                            time={time}\r\n                            onHover={onHover}\r\n                            hoverOut={hoverOut}\r\n                            innerWidth={innerWidth}\r\n                            innerHeight={innerHeight}\r\n                            margin = {margin}\r\n                            legendOffset={legendOffset}\r\n                            legendSize={legendSize}\r\n                            textPaddingX={textPaddingX}\r\n                            textPaddingY={textPaddingY}\r\n                            legend={legend}\r\n                        />\r\n\r\n                        <TableLine \r\n                            width={width}\r\n                            margin={margin}\r\n                            xScale ={xScale}\r\n                            yScale = {yScale}\r\n                            scaleOffset = {scaleOffset}\r\n                            innerHeight={innerHeight}\r\n                            dotOffset = {dotOffset}\r\n                            lineHeight={lineHeight}\r\n                        />\r\n                    {/* </g>   */}\r\n                    <RiskSvgTable \r\n                            head={years}\r\n                            topic ={legend}\r\n                            time={time}\r\n                            data={data}\r\n                            color={color}\r\n                            width={width}\r\n                            xScale ={xScale}\r\n                            yScale={yScale}\r\n                            margin={margin}\r\n                            textScale = {textScale}\r\n                            mar = {mar}\r\n                            lineHeight = {lineHeight}\r\n                            // margin={margin}\r\n                            onHover={onHover}\r\n                            hoverOut={hoverOut}\r\n                            clnames={clnames}\r\n                    /> \r\n                     </g>                  \r\n                </svg>\r\n            </Col>\r\n        \r\n        </Row>\r\n        {/* <Row>\r\n            <Col md='12' style={{paddingLeft:'0px'}}>\r\n            <TableLine \r\n                    width={width}\r\n                    margin={margin}\r\n                    xScale ={xScale}\r\n                    yScale = {yScale}\r\n                    scaleOffset = {5}\r\n                    innerHeight={innerHeight}\r\n                />\r\n\r\n                <RiskTable\r\n                    head={years}\r\n                    topic ={legend}\r\n                    time={time}\r\n                    data={data}\r\n                    color={color}\r\n                />\r\n\r\n                <RiskSvgTable />\r\n            </Col>            \r\n        </Row> */}\r\n    </Col>\r\n)\r\n}","import React, { useState } from \"react\"\r\nimport { AiFillQuestionCircle } from \"react-icons/ai\"\r\nimport { Form, Col, Row, InputGroup, FormControl, Button, Image, Modal} from \"react-bootstrap\"\r\nimport * as $ from 'jquery'\r\nimport './Stratification.css'\r\n\r\nlet placeholder = 'https://raw.githubusercontent.com/uic-evl/hnc-predictor/master/src/images/OS/OS_LT5_UT25.jpg'\r\n// let perc = null;\r\n// let risk = null;\r\nexport const Stratification = ({\r\n    lowRef,\r\n    upRef,\r\n    // overallRisk,\r\n    // overallPerc,\r\n    // localRisk,\r\n    // localPerc,\r\n    // regionalRisk,\r\n    // regionalPerc,\r\n    patientClass,\r\n    riskCalculation,\r\n    riskRef\r\n}) =>{\r\n    // console.log(patientClass)\r\n    const [imgSrc, setImgSrc] = useState(placeholder);\r\n\r\n    const onButtonClick = () =>{\r\n        riskCalculation()\r\n        handleChange()\r\n    }\r\n\r\n    const handleChange = () =>{\r\n        \r\n        console.log(riskRef.current.value)\r\n        console.log(upRef.current.value)\r\n        console.log(lowRef.current.value)\r\n\r\n        let folder = riskRef.current.value;\r\n        let lower = lowRef.current.value;\r\n        let upper = upRef.current.value;\r\n\r\n        let imageUrl = `https://raw.githubusercontent.com/uic-evl/hnc-predictor/master/src/images/${folder}/OS_LT${lower}_UT${upper}.jpg`;\r\n        \r\n        setImgSrc(imageUrl)\r\n        $('#imageid').fadeOut('fast')\r\n        $('#imageid').fadeIn(\"slow\");\r\n        \r\n\r\n        // setImgSrc(imageUrl)\r\n    }\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const [riskShow, setriskShow] = useState(false);\r\n\r\n    const handleriskClose = () => setriskShow(false);\r\n    const handleriskShow = () => setriskShow(true);\r\n\r\n    const [imageShow, setImageShow] = useState(false);\r\n\r\n    const handleImageShow = () => setImageShow(true);\r\n    const handleImageClose = () => setImageShow(false);\r\n\r\n    return (\r\n        <Col className='strat' md='4' id=\"stratback\" style={\r\n            {marginLeft:\"1%\", width:\"31%\"}}>\r\n            <Row>\r\n                {/* <Col md='10' id=\"back\"> */}\r\n                    <h4 className='d-flex justify-content-center'>Model-based Stratification</h4>\r\n                    <Row>\r\n                    <Form.Group controlId=\"formGridState\" id='selects'>\r\n                        <Form.Label id=\"riskFormLabel\">Select risk-thresholds <AiFillQuestionCircle onClick={handleShow}/></Form.Label>\r\n                        <Form.Select defaultValue=\"OS\" ref={riskRef} onChange={handleChange}  style={{fontSize: '0.9em'}}>\r\n                        <option value='OS'> Overall Survival (OS) </option>\r\n                        <option value='LC'> Local Control (LC) </option>\r\n                        <option value='RC'> Regional Control (RC) </option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    </Row>\r\n\r\n                    <Modal show={show} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Select risk-thresholds</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>Please select the 2-year risk you select as threshold for \r\n                            low- and high-risk mortality, local and/or regional failure (n.b. these are the inverse of the survival/control\r\n                             risk displayed in the graph).<br/>\r\n                             The default low- and high-risk thresholds are 5% and 25%, which are determined \r\n                             on the large-scale dataset, refer to [link_to_paper]\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n\r\n\r\n\r\n                    <Row>\r\n                        <InputGroup size=\"sm\" id=\"inputs\">\r\n                            <InputGroup.Text id=\"basic-addon1\">Low-risk threshold</InputGroup.Text>\r\n                            <FormControl\r\n                            aria-label=\"lower\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            id=\"lowRef\"\r\n                            ref={lowRef}\r\n                            defaultValue={5}\r\n                            />\r\n                            <InputGroup.Text id=\"basic-addon1\">%</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Row>\r\n                    \r\n                    <Row>\r\n                        <InputGroup size=\"sm\" id=\"inputs\">\r\n                            <InputGroup.Text id=\"basic-addon2\">High-risk threshold</InputGroup.Text>\r\n                            <FormControl\r\n                            aria-label=\"upper\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            id=\"upRef\"\r\n                            ref={upRef}\r\n                            defaultValue={25}\r\n                            />\r\n                            <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Row>\r\n                    \r\n                    <Button variant=\"primary\" \r\n                        size=\"sm\"\r\n                        onClick={onButtonClick}\r\n                        style={{width: '15%', marginLeft: '56%'}}\r\n                        id=\"stratButton\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                {/* </Col> */}\r\n            </Row>\r\n            <Row className='survivalImage'>                \r\n                <Image src={imgSrc} id='imageid'/>\r\n                <AiFillQuestionCircle id=\"headerText\" onClick={handleImageShow}/>\r\n\r\n                <Modal show={imageShow} onHide={handleImageClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Cohort-based Overall Survival</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            This is a visualization of survival curve separation \r\n                            of patients with the low- and high-risk thresholds inputted  \r\n                            above. These curves are based on the MDACC training+test cohort \r\n                            of 2106 head and neck cancer patients.\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleImageClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            </Row>\r\n            {\r\n                patientClass !== null && \r\n                <Row style={{marginLeft: '0%'}}>\r\n                    <p><b>The current patient is classified as: <AiFillQuestionCircle onClick={handleriskShow}/> </b> <br/>\r\n                    <b>{patientClass.overallRisk}-risk</b> for mortality (2y risk = {patientClass.overallPerc}%) <br/>\r\n                    <b>{patientClass.localRisk}-risk</b> for local tumor failure (2y risk = {patientClass.localPerc}%) <br/>\r\n                    <b>{patientClass.regionalRisk}-risk</b> for regional tumor failure (2y risk = {patientClass.regionalPerc}%)</p>\r\n\r\n\r\n                    <Modal show={riskShow} onHide={handleriskClose}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Current Patient Classification</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>This classification is dependent on the thresholds\r\n                             inputted in the top of this panel\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleriskClose}>\r\n                            Close\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n                </Row>\r\n\r\n            }\r\n        </Col>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport * as d3 from 'd3';\r\n\r\nimport {Container, Row} from 'react-bootstrap'\r\n\r\nimport {post} from 'axios'\r\nimport {useState } from 'react';\r\n\r\nimport {FormView} from './components/FormView'\r\nimport {LineView} from './components/LineView/LineView'\r\nimport { Stratification } from './components/Stratification/Stratification';\r\n\r\nlet stage_new = null\r\nlet stage_new_7th  = null\r\n\r\nconst createArrayRange = (start, end, step) => {\r\n  let result = []\r\n  for (let i = start; i < end; i = i + step) {\r\n      result.push(+i.toFixed(1));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst time = Array.from(createArrayRange(0,10,0.1))\r\n\r\nconst yearIndex = time.indexOf(2)\r\nlet tRef = \"T4\";\r\nlet nRef = \"N2c\";\r\n\r\nfunction App() {\r\n  const size = useWindowResize();\r\n\r\n  const ageRef = React.createRef();\r\n  const perfScoreRef = React.createRef();\r\n  const packRef = React.createRef();\r\n  const siteRef = React.createRef();\r\n  const hpvRef = React.createRef();\r\n  const riskRef = React.createRef();\r\n\r\n  let lowRef = React.createRef()\r\n  let upRef = React.createRef()\r\n\r\n  const [prediction, setPrediction] = useState(null)\r\n  const [patientClass, setPatientClass] = useState(null)\r\n  const [ajccStage, setAjccStage] = useState('III')\r\n\r\n  const riskCalculation = () => {\r\n    let riskValues = {}\r\n    if(prediction){\r\n      // console.log(d3.select('#lowRef').node().value)\r\n      let low, up;\r\n      if(lowRef.current === null){\r\n        low = d3.select('#lowRef').node().value\r\n        up = d3.select('#upRef').node().value\r\n      }else{\r\n        low = lowRef.current.value;  \r\n        up = upRef.current.value;     \r\n  \r\n      }\r\n      let overallSurv = prediction[0][0]  \r\n      let twoYearOverall = overallSurv[yearIndex] * 100  \r\n      let overallMortality = Math.round(100 - twoYearOverall);\r\n  \r\n      if (overallMortality < low){\r\n          riskValues.overallRisk = 'Low'\r\n      }else if(overallMortality >= low && overallMortality <= up){\r\n          riskValues.overallRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.overallRisk = 'High'\r\n      }\r\n\r\n      riskValues.overallPerc = overallMortality\r\n  \r\n      let localServ = prediction[1][0]  \r\n      let twoYearLocal = localServ[yearIndex] * 100\r\n      let localMortality = Math.round(100 - twoYearLocal);\r\n  \r\n      if (localMortality < low){\r\n          riskValues.localRisk = 'Low'\r\n      }else if(localMortality >= low && localMortality <= up){\r\n          riskValues.localRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.localRisk = 'High'\r\n      }\r\n  \r\n      riskValues.localPerc = localMortality\r\n\r\n      let regionalSurv = prediction[2][0]  \r\n      let twoYearRegional = regionalSurv[yearIndex] * 100\r\n      let regionalMortality = Math.round(100 - twoYearRegional);\r\n  \r\n      if (regionalMortality < low){\r\n          riskValues.regionalRisk = 'Low'\r\n      }else if(regionalMortality >= low && regionalMortality <= up){\r\n          riskValues.regionalRisk = 'Intermediate'\r\n      }else{\r\n          riskValues.regionalRisk = 'High'\r\n      }\r\n\r\n      riskValues.regionalPerc = regionalMortality;\r\n\r\n      setPatientClass(riskValues)\r\n    }\r\n\r\n}\r\n  const onTChange = (event) =>{\r\n    tRef = event.target.value;\r\n    // console.log(tRef)\r\n    updateAjccStage()\r\n  }\r\n  const onNChange = (event) =>{\r\n    nRef = event.target.value;\r\n    // console.log(nRef)\r\n    updateAjccStage()\r\n  }\r\n\r\n\r\n  const handleButtonClick = () =>{\r\n    console.log(\"i am clicked\")\r\n    let val = {\r\n      \"AGE\": ageRef.current.value,\r\n      \"Performance_score\": perfScoreRef.current.value,\r\n      \"pack_years\": packRef.current.value,\r\n      \"site\" : siteRef.current.value,\r\n      // \"T_stage_LC\" : tlcRef,\r\n      \"T_stage\" : tRef,\r\n      \"N_stage\" : nRef,\r\n      \"HPV.P16.status\" : hpvRef.current.value\r\n    }\r\n    post(\r\n      'https://risk-calculator.evl.uic.edu:8080/backend',\r\n      // 'http://127.0.0.1:8080/backend',\r\n      {data:val}\r\n    ).then((response) => {\r\n\r\n      stage_new = response.data[0]\r\n      stage_new_7th = response.data[1]\r\n      // console.log(stage_new)\r\n\r\n      let predData = [response.data[2], response.data[3], response.data[4]]\r\n\r\n      setPrediction(predData)\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n    });\r\n\r\n  }\r\n\r\n  const updateAjccStage = () =>{\r\n    // console.log(\"update ajcc stage called\")\r\n    // console.log(tRef, nRef)\r\n    // console.log([1].includes(1))\r\n    let site = siteRef.current.value;\r\n    let hpv = hpvRef.current.value;\r\n    // console.log(site, hpv)\r\n    if(site === 'OPC' && hpv === 'Positive'){\r\n      if(['T0', 'T1', 'T2', 'Tx'].includes(tRef) && ['N0', 'N1', 'N2a-b'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T0', 'T1', 'T2', 'Tx'].includes(tRef) && ['N2c'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T3'].includes(tRef) && ['N0', 'N1', 'N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T4'].includes(tRef) || ['N3'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }\r\n    }else if((site === 'OPC' && hpv === 'Negative') || [\"Oral Cavity\",\"Hypopharynx\",\"Larynx\"].includes(site)){\r\n      if(['N3'].includes(nRef)){\r\n        setAjccStage('IVb')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T2'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T1', 'T2', 'Tx'].includes(tRef) && ['N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T3'].includes(tRef) && ['N0','N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T4'].includes(tRef) || ['N2a-b','N2c'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }\r\n    }else if(site === 'Nasopharynx'){\r\n      if(['T0', 'T1', 'Tx'].includes(tRef) && ['N0'].includes(nRef)){\r\n        setAjccStage('I')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N1'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T2'].includes(tRef) && ['N0', 'N1'].includes(nRef)){\r\n        setAjccStage('II')\r\n      }else if(['T0', 'T1', 'Tx'].includes(tRef) && ['N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T2', 'T3'].includes(tRef) && ['N2a-b', 'N2c'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T3'].includes(tRef) && ['N0', 'N1'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['T4'].includes(tRef) || ['N3'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }\r\n    }else if(site=== 'unknown_primary'){\r\n      if(['N1', 'N2a-b'].includes(nRef)){\r\n        setAjccStage('III')\r\n      }else if(['N2c'].includes(nRef)){\r\n        setAjccStage('IVa')\r\n      }else if(['N3'].includes(nRef)){\r\n        setAjccStage('IVb')\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    riskCalculation();\r\n  }, [prediction])\r\n\r\n\r\n\r\n  if(!prediction){\r\n    return (\r\n      <Container fluid>\r\n      <Row>\r\n        <FormView \r\n          onButtonClick={handleButtonClick}\r\n          ageRef={ageRef}\r\n          perfScoreRef = {perfScoreRef}\r\n          packRef = {packRef}\r\n          siteRef = {siteRef}\r\n          // tlcRef = {onTLChange}\r\n          tRef = {onTChange}\r\n          nRef = {onNChange}\r\n          hpvRef = {hpvRef}\r\n          stage = {ajccStage}\r\n          stageUpdate = {updateAjccStage}\r\n          riskCalculation={riskCalculation}\r\n        />\r\n      </Row>\r\n    </Container>\r\n    );\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <Container fluid className='contain' >\r\n    <Row>\r\n      <FormView\r\n        onButtonClick={handleButtonClick}\r\n        ageRef={ageRef}\r\n        perfScoreRef = {perfScoreRef}\r\n        packRef = {packRef}\r\n        siteRef = {siteRef}\r\n        // tlcRef = {onTLChange}\r\n        tRef = {onTChange}\r\n        nRef = {onNChange}\r\n        hpvRef = {hpvRef}\r\n        stage = {ajccStage}\r\n        stageUpdate = {updateAjccStage}\r\n        riskCalculation={riskCalculation}\r\n      />\r\n      <LineView \r\n        data={prediction}\r\n        time={time}\r\n        windowHeight={size.height}\r\n        windowWidth={size.width}\r\n      />\r\n      <Stratification\r\n        // yrIndex = {yearIndex}\r\n        // data ={prediction[2][0]}\r\n        riskCalculation={riskCalculation}\r\n        // overallRisk={overallRisk}\r\n        // overallPerc={overallPerc}\r\n        // localRisk={localRisk}\r\n        // localPerc={localPerc}\r\n        // regionalRisk={regionalRisk}\r\n        // regionalPerc={regionalPerc}\r\n        patientClass = {patientClass}\r\n        lowRef={lowRef}\r\n        upRef={upRef}\r\n        riskRef = {riskRef}\r\n      />\r\n    </Row>\r\n  </Container>\r\n  );\r\n}\r\n\r\n\r\nfunction useWindowResize(){\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}